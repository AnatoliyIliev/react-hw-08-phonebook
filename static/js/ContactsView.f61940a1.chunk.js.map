{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ElementContactList/ElementContactList.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js","components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss"],"names":["connect","state","contacts","contactsSelectors","getAllContacts","isLoadingContacts","getLoading","dispatch","onSubmit","name","number","contactsOperations","addContacts","useState","setName","setNumber","nameId","uuidv4","numberId","handleChange","event","currentTarget","value","reset","className","styles","form","preventDefault","labelName","htmlFor","type","onChange","id","pattern","title","required","labelNumber","button","tupe","ElementContactList","onDeleteContact","onClick","getVisibleContacts","deleteContacts","contactList","map","contactList_items","getFilter","changeFilter","barStyles","display","alignItems","marginBottom","ContactsView","params","useDispatch","useSelector","isError","getError","useEffect","fetchContacts","Container","style","Alert","severity","module","exports"],"mappings":"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","file":"static/js/ContactsView.f61940a1.chunk.js","sourcesContent":["// import { getDefaultNormalizer } from '@testing-library/react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport styles from './ContactForm.module.scss';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\n\nfunction ContactForm({ onSubmit, isLoadingContacts }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = uuidv4();\n  const numberId = uuidv4();\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        // setName(prevState => [...prevState, value]);\n        break;\n      case 'number':\n        setNumber(value);\n        // setNumber(prevState => [...prevState, value]);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(name, number);\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.labelName} htmlFor={nameId}>\n        Name\n        <input\n          type=\"text\"\n          value={name}\n          onChange={handleChange}\n          id={nameId}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={styles.labelNumber} htmlFor={numberId}>\n        Number\n        <input\n          type=\"tel\"\n          value={number}\n          onChange={handleChange}\n          id={numberId}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button className={styles.button} tupe=\"submit\">\n        Add contact\n      </button>\n      {isLoadingContacts && <h2>Loading...</h2>}\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getAllContacts(state),\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) =>\n    dispatch(contactsOperations.addContacts(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","const ElementContactList = ({ name, number, onDeleteContact }) => (\n  <>\n    <span>\n      {name}: {number}\n    </span>\n    <button onClick={onDeleteContact}>Delete</button>\n  </>\n);\n\nexport default ElementContactList;\n","import { connect } from 'react-redux';\nimport ElementContactList from '../ElementContactList';\nimport styles from './ContactList.module.scss';\nimport PropTypes from 'prop-types';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <>\n    {/* <h1>nj jyj { contacts }</h1> */}\n    <ul className={styles.contactList}>\n      {contacts.map(({ name, number, id }) => (\n        <li className={styles.contactList_items} key={id}>\n          <ElementContactList\n            name={name}\n            number={number}\n            onDeleteContact={() => onDeleteContact(id)}\n          />\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsOperations.deleteContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n// import Todo from '../Todo';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { todosOperations, todosSelectors } from '../../redux/todos';\n// import styles from './TodoList.module.css';\n\n// export default function TodoList() {\n//   const dispatch = useDispatch();\n//   const todos = useSelector(todosSelectors.getVisibleTodos);\n\n//   const onDeleteTodo = id => dispatch(todosOperations.deleteTodo(id));\n//   const onToggleCompleted = id => dispatch(todosOperations.toggleCompleted(id));\n\n//   return (\n//     <ul className={styles.list}>\n//       {todos.map(({ id, description, completed }) => (\n//         <li key={id} className={completed ? styles.completed : styles.item}>\n//           <Todo\n//             text={description}\n//             completed={completed}\n//             onToggleCompleted={() =>\n//               onToggleCompleted({ id, completed: !completed })\n//             }\n//             onDelete={() => onDeleteTodo(id)}\n//           />\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// }\n","import styles from './Filter.module.scss';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { changeFilter, contactsSelectors } from '../../redux/contacts';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.labelName}>\n    Find contacts by name\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: event => dispatch(changeFilter(event.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\n\nimport Container from '../components/Container';\nimport ContactForm from '../components/ContactForm';\nimport ContactList from '../components/ContactList';\nimport Filter from '../components/Filter';\n\n// import IconButton from '../components/IconButton';\n// import { ReactComponent as AddIcon } from '../icons/add.svg';\nimport { contactsOperations, contactsSelectors } from '../redux/contacts';\n\nconst barStyles = {\n  display: 'flex',\n  alignItems: 'flex-end',\n  marginBottom: 20,\n};\n\nexport default function ContactsView(params) {\n  const dispatch = useDispatch();\n  const isLoadingContacts = useSelector(contactsSelectors.getLoading);\n\n  // const isLoadingContacts = useSelector(state =>\n  //   contactsSelectors.getLoading(state),\n  // );\n\n  const isError = useSelector(state => contactsSelectors.getError(state));\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <Container>\n      <ContactForm />\n      <div style={barStyles}>\n        <Filter />\n\n        {isLoadingContacts && <h1>Загружаем...</h1>}\n        {isError && <Alert severity=\"error\">{isError}</Alert>}\n      </div>\n\n      <ContactList />\n    </Container>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__1007G\",\"form\":\"ContactForm_form__1NiH1\",\"labelName\":\"ContactForm_labelName__1lmly\",\"labelNumber\":\"ContactForm_labelNumber__1kfeO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__9FkvI\",\"contactList_items\":\"ContactList_contactList_items__1hv-I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelName\":\"Filter_labelName__2T5wB\"};"],"sourceRoot":""}