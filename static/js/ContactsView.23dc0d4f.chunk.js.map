{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ElementContactList/ElementContactList.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js","components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss"],"names":["connect","state","contacts","contactsSelectors","getAllContacts","isLoadingContacts","getLoading","dispatch","onSubmit","name","number","contactsOperations","addContacts","useState","setName","setNumber","nameId","uuidv4","numberId","handleChange","event","currentTarget","value","reset","className","styles","form","preventDefault","labelName","htmlFor","type","onChange","id","pattern","title","required","labelNumber","button","tupe","ElementContactList","onDeleteContact","ContactList_name","onClick","getVisibleContacts","deleteContacts","contactList","map","contactList_items","getFilter","changeFilter","barStyles","display","alignItems","marginBottom","ContactsView","params","useDispatch","useSelector","isError","getError","useEffect","fetchContacts","Container","style","Alert","severity","module","exports"],"mappings":"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","file":"static/js/ContactsView.23dc0d4f.chunk.js","sourcesContent":["// import { getDefaultNormalizer } from '@testing-library/react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './ContactForm.module.scss';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nfunction ContactForm({ onSubmit, isLoadingContacts }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const nameId = uuidv4();\r\n  const numberId = uuidv4();\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        // setName(prevState => [...prevState, value]);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        // setNumber(prevState => [...prevState, value]);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    onSubmit(name, number);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={styles.form} onSubmit={handleSubmit}>\r\n      <label className={styles.labelName} htmlFor={nameId}>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          id={nameId}\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label className={styles.labelNumber} htmlFor={numberId}>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          id={numberId}\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n      <button className={styles.button} tupe=\"submit\">\r\n        Add contact\r\n      </button>\r\n      {isLoadingContacts && <h2>Loading...</h2>}\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) =>\r\n    dispatch(contactsOperations.addContacts(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import styles from \"./ElementContactList.module.scss\";\r\n\r\nconst ElementContactList = ({ name, number, onDeleteContact }) => (\r\n  <>\r\n    <span className={styles.ContactList_name}>\r\n      {name}: {number}\r\n    </span>\r\n    <button onClick={onDeleteContact}>Delete</button>\r\n  </>\r\n);\r\n\r\nexport default ElementContactList;\r\n","import { connect } from 'react-redux';\r\nimport ElementContactList from '../ElementContactList';\r\nimport styles from './ContactList.module.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <>\r\n    {/* <h1>nj jyj { contacts }</h1> */}\r\n    <ul className={styles.contactList}>\r\n      {contacts.map(({ name, number, id }) => (\r\n        <li className={styles.contactList_items} key={id}>\r\n          <ElementContactList\r\n            name={name}\r\n            number={number}\r\n            onDeleteContact={() => onDeleteContact(id)}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsOperations.deleteContacts(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n// import Todo from '../Todo';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import { todosOperations, todosSelectors } from '../../redux/todos';\r\n// import styles from './TodoList.module.css';\r\n\r\n// export default function TodoList() {\r\n//   const dispatch = useDispatch();\r\n//   const todos = useSelector(todosSelectors.getVisibleTodos);\r\n\r\n//   const onDeleteTodo = id => dispatch(todosOperations.deleteTodo(id));\r\n//   const onToggleCompleted = id => dispatch(todosOperations.toggleCompleted(id));\r\n\r\n//   return (\r\n//     <ul className={styles.list}>\r\n//       {todos.map(({ id, description, completed }) => (\r\n//         <li key={id} className={completed ? styles.completed : styles.item}>\r\n//           <Todo\r\n//             text={description}\r\n//             completed={completed}\r\n//             onToggleCompleted={() =>\r\n//               onToggleCompleted({ id, completed: !completed })\r\n//             }\r\n//             onDelete={() => onDeleteTodo(id)}\r\n//           />\r\n//         </li>\r\n//       ))}\r\n//     </ul>\r\n//   );\r\n// }\r\n","import styles from './Filter.module.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { changeFilter, contactsSelectors } from '../../redux/contacts';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className={styles.labelName}>\r\n    Find contacts by name\r\n    <input type=\"text\" value={value} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(changeFilter(event.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\n\nimport Container from '../components/Container';\nimport ContactForm from '../components/ContactForm';\nimport ContactList from '../components/ContactList';\nimport Filter from '../components/Filter';\n\n// import IconButton from '../components/IconButton';\n// import { ReactComponent as AddIcon } from '../icons/add.svg';\nimport { contactsOperations, contactsSelectors } from '../redux/contacts';\n\nconst barStyles = {\n  display: 'flex',\n  alignItems: 'flex-end',\n  marginBottom: 20,\n};\n\nexport default function ContactsView(params) {\n  const dispatch = useDispatch();\n  const isLoadingContacts = useSelector(contactsSelectors.getLoading);\n\n  // const isLoadingContacts = useSelector(state =>\n  //   contactsSelectors.getLoading(state),\n  // );\n\n  const isError = useSelector(state => contactsSelectors.getError(state));\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <Container>\n      <ContactForm />\n      <div style={barStyles}>\n        <Filter />\n\n        {isLoadingContacts && <h1>Загружаем...</h1>}\n        {isError && <Alert severity=\"error\">{isError}</Alert>}\n      </div>\n\n      <ContactList />\n    </Container>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__3e-E3\",\"form\":\"ContactForm_form__2ITiz\",\"labelName\":\"ContactForm_labelName__DKDt3\",\"labelNumber\":\"ContactForm_labelNumber__7GK4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1d0hs\",\"contactList_items\":\"ContactList_contactList_items__2Rb2g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelName\":\"Filter_labelName__3MsUp\"};"],"sourceRoot":""}